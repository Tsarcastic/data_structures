
14:20   [saul]  so there are a few things I would change just for hygiene sake, that I don't know if they're relevant but might help at least eliminate some things
14:22   [saul]  line 267: use "if pivot.parent is None"
14:23   [saul]  and probably use 'is' instead of '==' throughout
14:24   [saul]  so what i would check, since your first order complaint is that "pivot.parent.left" is not being reset, is to look at the addresses of the objects, and make sure that they're different
14:25   [brendan]   ok, how do I do that?
14:25   [saul]  it's possible that pivot.parent.left already is pivot, or that the values in pivot are the same before/after, even though the objs are different. (or at least they compare the same, although with the default comparison operator it should check all fields)
14:25   [saul]  in pdb, you can eval expressions, right?
14:25   [saul]  try using repr() on these objects
14:26   [saul]  that should give you a pointer
14:26   [brendan]   cool, thanks dog
14:26   [saul]  but in general it looks like you're doing things more or less reasonably
14:27   [saul]  i would choose a different parm name besdies 'root' for these functions, because there is a self.root already, and i got caught up for a few seconds thinking that might be your problem
14:27   [saul]  maybe pivot_base or pivot_root or something
14:27   [brendan]   that's a good idea

    def left_right(self, root):
        """. It's just a jump to the left. And a step to the ri-i-i-ight."""
        right = root
        center = root.left.right
        left = root.left

        if right == self.root:
            self.root = center
        else:
            if right.parent.left == right:
                right.parent.left == center
                right.parent.left_depth += -1
            elif right.parent.right == right:
                right.parent.right == center
                right.parent.right_depth += -1

        left.left = None
        left.parent = center
        left.right = None
        left.right_depth = 0
        left.left_depth = 0

        center.left = left
        center.parent = right.parent
        center.right = right
        center.right_depth = 1
        center.left_depth = 1

        right.left = None
        right.right = None
        right.parent = center
        right.left_depth = 0
        right.right_depth = 0

    def right_left(self, root):
        """Riiight. Leeefft. Riiight. Leeefftt."""
        left = root
        center = root.right.left
        right = root.right

        if left == self.root:
            self.root = center
        else:
            if left.parent.left == left:
                left.parent.left == center
                left.parent.left_depth += 1
            elif left.parent.right == right:
                left.parent.right == center
                left.parent.right_depth += 1

        center.left = left
        center.parent = left.parent
        center.right = right
        center.right_depth = 1
        center.left_depth = 1

        left.right = None
        left.parent = center
        left.left = None
        left.right_depth = 0
        left.left_depth = 0

        right.right = None
        right.parent = center
        right.left = None
        right.left_depth = 0
        right.right_depth = 0